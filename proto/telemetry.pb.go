// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: proto/telemetry.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TelemetryData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // epoch millis
	Latitude      float64                `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude      float64                `protobuf:"fixed64,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	SpeedKph      float32                `protobuf:"fixed32,6,opt,name=speed_kph,json=speedKph,proto3" json:"speed_kph,omitempty"`
	Acceleration  float32                `protobuf:"fixed32,7,opt,name=acceleration,proto3" json:"acceleration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryData) Reset() {
	*x = TelemetryData{}
	mi := &file_proto_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryData) ProtoMessage() {}

func (x *TelemetryData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryData.ProtoReflect.Descriptor instead.
func (*TelemetryData) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetryData) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TelemetryData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TelemetryData) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *TelemetryData) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *TelemetryData) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *TelemetryData) GetSpeedKph() float32 {
	if x != nil {
		return x.SpeedKph
	}
	return 0
}

func (x *TelemetryData) GetAcceleration() float32 {
	if x != nil {
		return x.Acceleration
	}
	return 0
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_proto_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *Ack) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StartSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BikeId        string                 `protobuf:"bytes,1,opt,name=bike_id,json=bikeId,proto3" json:"bike_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartSessionRequest) Reset() {
	*x = StartSessionRequest{}
	mi := &file_proto_telemetry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSessionRequest) ProtoMessage() {}

func (x *StartSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSessionRequest.ProtoReflect.Descriptor instead.
func (*StartSessionRequest) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *StartSessionRequest) GetBikeId() string {
	if x != nil {
		return x.BikeId
	}
	return ""
}

type StartSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartSessionResponse) Reset() {
	*x = StartSessionResponse{}
	mi := &file_proto_telemetry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSessionResponse) ProtoMessage() {}

func (x *StartSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSessionResponse.ProtoReflect.Descriptor instead.
func (*StartSessionResponse) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *StartSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SessionId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionId) Reset() {
	*x = SessionId{}
	mi := &file_proto_telemetry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionId) ProtoMessage() {}

func (x *SessionId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionId.ProtoReflect.Descriptor instead.
func (*SessionId) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *SessionId) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type Session struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *SessionId             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DataPoints    []*TelemetryData       `protobuf:"bytes,2,rep,name=data_points,json=dataPoints,proto3" json:"data_points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_proto_telemetry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *Session) GetId() *SessionId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Session) GetDataPoints() []*TelemetryData {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

var File_proto_telemetry_proto protoreflect.FileDescriptor

const file_proto_telemetry_proto_rawDesc = "" +
	"\n" +
	"\x15proto/telemetry.proto\x12\x05proto\"\xe3\x01\n" +
	"\rTelemetryData\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12\x1a\n" +
	"\blatitude\x18\x03 \x01(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x04 \x01(\x01R\tlongitude\x12\x1a\n" +
	"\baltitude\x18\x05 \x01(\x01R\baltitude\x12\x1b\n" +
	"\tspeed_kph\x18\x06 \x01(\x02R\bspeedKph\x12\"\n" +
	"\facceleration\x18\a \x01(\x02R\facceleration\"\x1f\n" +
	"\x03Ack\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\".\n" +
	"\x13StartSessionRequest\x12\x17\n" +
	"\abike_id\x18\x01 \x01(\tR\x06bikeId\"5\n" +
	"\x14StartSessionResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"*\n" +
	"\tSessionId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"b\n" +
	"\aSession\x12 \n" +
	"\x02id\x18\x01 \x01(\v2\x10.proto.SessionIdR\x02id\x125\n" +
	"\vdata_points\x18\x02 \x03(\v2\x14.proto.TelemetryDataR\n" +
	"dataPoints2\xeb\x01\n" +
	"\tMotoTrack\x12G\n" +
	"\fStartSession\x12\x1a.proto.StartSessionRequest\x1a\x1b.proto.StartSessionResponse\x12*\n" +
	"\n" +
	"EndSession\x12\x10.proto.SessionId\x1a\n" +
	".proto.Ack\x125\n" +
	"\x0fStreamTelemetry\x12\x14.proto.TelemetryData\x1a\n" +
	".proto.Ack(\x01\x122\n" +
	"\x0eGetSessionData\x12\x10.proto.SessionId\x1a\x0e.proto.SessionB+Z)github.com/ademar-prothon/mom/proto;protob\x06proto3"

var (
	file_proto_telemetry_proto_rawDescOnce sync.Once
	file_proto_telemetry_proto_rawDescData []byte
)

func file_proto_telemetry_proto_rawDescGZIP() []byte {
	file_proto_telemetry_proto_rawDescOnce.Do(func() {
		file_proto_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_telemetry_proto_rawDesc), len(file_proto_telemetry_proto_rawDesc)))
	})
	return file_proto_telemetry_proto_rawDescData
}

var file_proto_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_telemetry_proto_goTypes = []any{
	(*TelemetryData)(nil),        // 0: proto.TelemetryData
	(*Ack)(nil),                  // 1: proto.Ack
	(*StartSessionRequest)(nil),  // 2: proto.StartSessionRequest
	(*StartSessionResponse)(nil), // 3: proto.StartSessionResponse
	(*SessionId)(nil),            // 4: proto.SessionId
	(*Session)(nil),              // 5: proto.Session
}
var file_proto_telemetry_proto_depIdxs = []int32{
	4, // 0: proto.Session.id:type_name -> proto.SessionId
	0, // 1: proto.Session.data_points:type_name -> proto.TelemetryData
	2, // 2: proto.MotoTrack.StartSession:input_type -> proto.StartSessionRequest
	4, // 3: proto.MotoTrack.EndSession:input_type -> proto.SessionId
	0, // 4: proto.MotoTrack.StreamTelemetry:input_type -> proto.TelemetryData
	4, // 5: proto.MotoTrack.GetSessionData:input_type -> proto.SessionId
	3, // 6: proto.MotoTrack.StartSession:output_type -> proto.StartSessionResponse
	1, // 7: proto.MotoTrack.EndSession:output_type -> proto.Ack
	1, // 8: proto.MotoTrack.StreamTelemetry:output_type -> proto.Ack
	5, // 9: proto.MotoTrack.GetSessionData:output_type -> proto.Session
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_telemetry_proto_init() }
func file_proto_telemetry_proto_init() {
	if File_proto_telemetry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_telemetry_proto_rawDesc), len(file_proto_telemetry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_telemetry_proto_goTypes,
		DependencyIndexes: file_proto_telemetry_proto_depIdxs,
		MessageInfos:      file_proto_telemetry_proto_msgTypes,
	}.Build()
	File_proto_telemetry_proto = out.File
	file_proto_telemetry_proto_goTypes = nil
	file_proto_telemetry_proto_depIdxs = nil
}
