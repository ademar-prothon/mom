// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/telemetry.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MotoTrack_StartSession_FullMethodName    = "/proto.MotoTrack/StartSession"
	MotoTrack_EndSession_FullMethodName      = "/proto.MotoTrack/EndSession"
	MotoTrack_StreamTelemetry_FullMethodName = "/proto.MotoTrack/StreamTelemetry"
	MotoTrack_GetSessionData_FullMethodName  = "/proto.MotoTrack/GetSessionData"
)

// MotoTrackClient is the client API for MotoTrack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MotoTrackClient interface {
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error)
	EndSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Ack, error)
	StreamTelemetry(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TelemetryData, Ack], error)
	GetSessionData(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*TelemetryLog, error)
}

type motoTrackClient struct {
	cc grpc.ClientConnInterface
}

func NewMotoTrackClient(cc grpc.ClientConnInterface) MotoTrackClient {
	return &motoTrackClient{cc}
}

func (c *motoTrackClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSessionResponse)
	err := c.cc.Invoke(ctx, MotoTrack_StartSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motoTrackClient) EndSession(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, MotoTrack_EndSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motoTrackClient) StreamTelemetry(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TelemetryData, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MotoTrack_ServiceDesc.Streams[0], MotoTrack_StreamTelemetry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TelemetryData, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MotoTrack_StreamTelemetryClient = grpc.ClientStreamingClient[TelemetryData, Ack]

func (c *motoTrackClient) GetSessionData(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*TelemetryLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TelemetryLog)
	err := c.cc.Invoke(ctx, MotoTrack_GetSessionData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MotoTrackServer is the server API for MotoTrack service.
// All implementations must embed UnimplementedMotoTrackServer
// for forward compatibility.
type MotoTrackServer interface {
	StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error)
	EndSession(context.Context, *SessionId) (*Ack, error)
	StreamTelemetry(grpc.ClientStreamingServer[TelemetryData, Ack]) error
	GetSessionData(context.Context, *SessionId) (*TelemetryLog, error)
	mustEmbedUnimplementedMotoTrackServer()
}

// UnimplementedMotoTrackServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMotoTrackServer struct{}

func (UnimplementedMotoTrackServer) StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedMotoTrackServer) EndSession(context.Context, *SessionId) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (UnimplementedMotoTrackServer) StreamTelemetry(grpc.ClientStreamingServer[TelemetryData, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTelemetry not implemented")
}
func (UnimplementedMotoTrackServer) GetSessionData(context.Context, *SessionId) (*TelemetryLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionData not implemented")
}
func (UnimplementedMotoTrackServer) mustEmbedUnimplementedMotoTrackServer() {}
func (UnimplementedMotoTrackServer) testEmbeddedByValue()                   {}

// UnsafeMotoTrackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MotoTrackServer will
// result in compilation errors.
type UnsafeMotoTrackServer interface {
	mustEmbedUnimplementedMotoTrackServer()
}

func RegisterMotoTrackServer(s grpc.ServiceRegistrar, srv MotoTrackServer) {
	// If the following call pancis, it indicates UnimplementedMotoTrackServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MotoTrack_ServiceDesc, srv)
}

func _MotoTrack_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotoTrackServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotoTrack_StartSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotoTrackServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotoTrack_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotoTrackServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotoTrack_EndSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotoTrackServer).EndSession(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotoTrack_StreamTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MotoTrackServer).StreamTelemetry(&grpc.GenericServerStream[TelemetryData, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MotoTrack_StreamTelemetryServer = grpc.ClientStreamingServer[TelemetryData, Ack]

func _MotoTrack_GetSessionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotoTrackServer).GetSessionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotoTrack_GetSessionData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotoTrackServer).GetSessionData(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

// MotoTrack_ServiceDesc is the grpc.ServiceDesc for MotoTrack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MotoTrack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MotoTrack",
	HandlerType: (*MotoTrackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSession",
			Handler:    _MotoTrack_StartSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _MotoTrack_EndSession_Handler,
		},
		{
			MethodName: "GetSessionData",
			Handler:    _MotoTrack_GetSessionData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTelemetry",
			Handler:       _MotoTrack_StreamTelemetry_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/telemetry.proto",
}
